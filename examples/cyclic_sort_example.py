def cyclic_sort(arr):
    """
    循環ソートの例

    Args:
        arr (list): ソート対象の配列
    """
    n = len(arr)
    i = 0
    while i < n:
        correct_index = arr[i] - 1  # 正しい位置は要素の値-1
        if arr[i] != arr[correct_index]:
            # 要素が正しい位置にない場合、交換
            arr[i], arr[correct_index] = arr[correct_index], arr[i]
        else:
            # 要素が正しい位置にある場合、次の要素へ
            i += 1

    # アルゴリズムの説明:
    # 1. 配列を先頭から走査します。
    # 2. 各要素について、その要素が正しい位置にあるかどうかを確認します。
    #    正しい位置とは、要素の値がi+1であるような位置です（iは配列のインデックス）。
    # 3. もし要素が正しい位置にない場合、その要素を正しい位置にある要素と交換します。
    # 4. 交換後、元の位置に新しい要素が来たので、その要素についても正しい位置にあるかどうかを確認し、必要であれば交換を繰り返します。
    # 5. 要素が正しい位置にある場合、または交換によって正しい位置に移動した場合、次の要素に進みます。
    # 6. 配列全体を走査し終えたら、ソート完了です。

    # 計算量: O(n)
    # 各要素は最大で1回しか交換されないため、全体の計算量はO(n)となります。
    # 最悪の場合でも、各要素は正しい位置に移動するまでにn回の交換が必要となることはありません。

# 例
arr = [3, 5, 2, 1, 4]
cyclic_sort(arr)
print(arr)  # 出力: [1, 2, 3, 4, 5]

arr = [5, 4, 3, 2, 1]
cyclic_sort(arr)
print(arr)

arr = [1, 2, 3, 4, 5]
cyclic_sort(arr)
print(arr)
